# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from obb import markets_pb2 as obb_dot_markets__pb2
from obb import popular_pb2 as obb_dot_popular__pb2
from obb import session_pb2 as obb_dot_session__pb2


class obbStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Markets = channel.unary_unary(
                '/obb.obb/Markets',
                request_serializer=obb_dot_markets__pb2.MarketRequest.SerializeToString,
                response_deserializer=obb_dot_markets__pb2.MarketResponse.FromString,
                )
        self.Session = channel.stream_stream(
                '/obb.obb/Session',
                request_serializer=obb_dot_session__pb2.SessionRequest.SerializeToString,
                response_deserializer=obb_dot_session__pb2.SessionResponse.FromString,
                )
        self.PopularCombinations = channel.unary_unary(
                '/obb.obb/PopularCombinations',
                request_serializer=obb_dot_popular__pb2.PopularCombinationRequest.SerializeToString,
                response_deserializer=obb_dot_popular__pb2.PopularCombinationResponse.FromString,
                )


class obbServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Markets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Session(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PopularCombinations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_obbServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Markets': grpc.unary_unary_rpc_method_handler(
                    servicer.Markets,
                    request_deserializer=obb_dot_markets__pb2.MarketRequest.FromString,
                    response_serializer=obb_dot_markets__pb2.MarketResponse.SerializeToString,
            ),
            'Session': grpc.stream_stream_rpc_method_handler(
                    servicer.Session,
                    request_deserializer=obb_dot_session__pb2.SessionRequest.FromString,
                    response_serializer=obb_dot_session__pb2.SessionResponse.SerializeToString,
            ),
            'PopularCombinations': grpc.unary_unary_rpc_method_handler(
                    servicer.PopularCombinations,
                    request_deserializer=obb_dot_popular__pb2.PopularCombinationRequest.FromString,
                    response_serializer=obb_dot_popular__pb2.PopularCombinationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'obb.obb', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class obb(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Markets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/obb.obb/Markets',
            obb_dot_markets__pb2.MarketRequest.SerializeToString,
            obb_dot_markets__pb2.MarketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Session(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/obb.obb/Session',
            obb_dot_session__pb2.SessionRequest.SerializeToString,
            obb_dot_session__pb2.SessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PopularCombinations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/obb.obb/PopularCombinations',
            obb_dot_popular__pb2.PopularCombinationRequest.SerializeToString,
            obb_dot_popular__pb2.PopularCombinationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
