// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: obb/service.proto

package obb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObbClient is the client API for Obb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObbClient interface {
	Markets(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*MarketResponse, error)
	Session(ctx context.Context, opts ...grpc.CallOption) (Obb_SessionClient, error)
	PopularCombinations(ctx context.Context, in *PopularCombinationRequest, opts ...grpc.CallOption) (*PopularCombinationResponse, error)
}

type obbClient struct {
	cc grpc.ClientConnInterface
}

func NewObbClient(cc grpc.ClientConnInterface) ObbClient {
	return &obbClient{cc}
}

func (c *obbClient) Markets(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*MarketResponse, error) {
	out := new(MarketResponse)
	err := c.cc.Invoke(ctx, "/obb.obb/Markets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *obbClient) Session(ctx context.Context, opts ...grpc.CallOption) (Obb_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Obb_ServiceDesc.Streams[0], "/obb.obb/Session", opts...)
	if err != nil {
		return nil, err
	}
	x := &obbSessionClient{stream}
	return x, nil
}

type Obb_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionResponse, error)
	grpc.ClientStream
}

type obbSessionClient struct {
	grpc.ClientStream
}

func (x *obbSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *obbSessionClient) Recv() (*SessionResponse, error) {
	m := new(SessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *obbClient) PopularCombinations(ctx context.Context, in *PopularCombinationRequest, opts ...grpc.CallOption) (*PopularCombinationResponse, error) {
	out := new(PopularCombinationResponse)
	err := c.cc.Invoke(ctx, "/obb.obb/PopularCombinations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObbServer is the server API for Obb service.
// All implementations must embed UnimplementedObbServer
// for forward compatibility
type ObbServer interface {
	Markets(context.Context, *MarketRequest) (*MarketResponse, error)
	Session(Obb_SessionServer) error
	PopularCombinations(context.Context, *PopularCombinationRequest) (*PopularCombinationResponse, error)
	mustEmbedUnimplementedObbServer()
}

// UnimplementedObbServer must be embedded to have forward compatible implementations.
type UnimplementedObbServer struct {
}

func (UnimplementedObbServer) Markets(context.Context, *MarketRequest) (*MarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Markets not implemented")
}
func (UnimplementedObbServer) Session(Obb_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedObbServer) PopularCombinations(context.Context, *PopularCombinationRequest) (*PopularCombinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopularCombinations not implemented")
}
func (UnimplementedObbServer) mustEmbedUnimplementedObbServer() {}

// UnsafeObbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObbServer will
// result in compilation errors.
type UnsafeObbServer interface {
	mustEmbedUnimplementedObbServer()
}

func RegisterObbServer(s grpc.ServiceRegistrar, srv ObbServer) {
	s.RegisterService(&Obb_ServiceDesc, srv)
}

func _Obb_Markets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObbServer).Markets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/obb.obb/Markets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObbServer).Markets(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Obb_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObbServer).Session(&obbSessionServer{stream})
}

type Obb_SessionServer interface {
	Send(*SessionResponse) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type obbSessionServer struct {
	grpc.ServerStream
}

func (x *obbSessionServer) Send(m *SessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *obbSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Obb_PopularCombinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopularCombinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObbServer).PopularCombinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/obb.obb/PopularCombinations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObbServer).PopularCombinations(ctx, req.(*PopularCombinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Obb_ServiceDesc is the grpc.ServiceDesc for Obb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Obb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "obb.obb",
	HandlerType: (*ObbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Markets",
			Handler:    _Obb_Markets_Handler,
		},
		{
			MethodName: "PopularCombinations",
			Handler:    _Obb_PopularCombinations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _Obb_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "obb/service.proto",
}
