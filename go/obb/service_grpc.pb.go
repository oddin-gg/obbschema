// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: obb/service.proto

package obb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Obb_AvailableMarkets_FullMethodName   = "/obb.obb/AvailableMarkets"
	Obb_SessionCreate_FullMethodName      = "/obb.obb/SessionCreate"
	Obb_SessionInfo_FullMethodName        = "/obb.obb/SessionInfo"
	Obb_PopularCombination_FullMethodName = "/obb.obb/PopularCombination"
)

// ObbClient is the client API for Obb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObbClient interface {
	// Used to retrieve a list of available markets for a given event.
	AvailableMarkets(ctx context.Context, in *AvailableMarketsRequest, opts ...grpc.CallOption) (*AvailableMarketsResponse, error)
	// Used for session creation.
	SessionCreate(ctx context.Context, in *SessionCreateRequest, opts ...grpc.CallOption) (*SessionCreateResponse, error)
	// Used for extraction info about desired session based on session id.
	SessionInfo(ctx context.Context, in *SessionInfoRequest, opts ...grpc.CallOption) (*SessionInfoResponse, error)
	// Used to get popular combinations of selections.
	PopularCombination(ctx context.Context, in *PopularCombinationRequest, opts ...grpc.CallOption) (*PopularCombinationResponse, error)
}

type obbClient struct {
	cc grpc.ClientConnInterface
}

func NewObbClient(cc grpc.ClientConnInterface) ObbClient {
	return &obbClient{cc}
}

func (c *obbClient) AvailableMarkets(ctx context.Context, in *AvailableMarketsRequest, opts ...grpc.CallOption) (*AvailableMarketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvailableMarketsResponse)
	err := c.cc.Invoke(ctx, Obb_AvailableMarkets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *obbClient) SessionCreate(ctx context.Context, in *SessionCreateRequest, opts ...grpc.CallOption) (*SessionCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionCreateResponse)
	err := c.cc.Invoke(ctx, Obb_SessionCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *obbClient) SessionInfo(ctx context.Context, in *SessionInfoRequest, opts ...grpc.CallOption) (*SessionInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionInfoResponse)
	err := c.cc.Invoke(ctx, Obb_SessionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *obbClient) PopularCombination(ctx context.Context, in *PopularCombinationRequest, opts ...grpc.CallOption) (*PopularCombinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PopularCombinationResponse)
	err := c.cc.Invoke(ctx, Obb_PopularCombination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObbServer is the server API for Obb service.
// All implementations must embed UnimplementedObbServer
// for forward compatibility.
type ObbServer interface {
	// Used to retrieve a list of available markets for a given event.
	AvailableMarkets(context.Context, *AvailableMarketsRequest) (*AvailableMarketsResponse, error)
	// Used for session creation.
	SessionCreate(context.Context, *SessionCreateRequest) (*SessionCreateResponse, error)
	// Used for extraction info about desired session based on session id.
	SessionInfo(context.Context, *SessionInfoRequest) (*SessionInfoResponse, error)
	// Used to get popular combinations of selections.
	PopularCombination(context.Context, *PopularCombinationRequest) (*PopularCombinationResponse, error)
	mustEmbedUnimplementedObbServer()
}

// UnimplementedObbServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedObbServer struct{}

func (UnimplementedObbServer) AvailableMarkets(context.Context, *AvailableMarketsRequest) (*AvailableMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableMarkets not implemented")
}
func (UnimplementedObbServer) SessionCreate(context.Context, *SessionCreateRequest) (*SessionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionCreate not implemented")
}
func (UnimplementedObbServer) SessionInfo(context.Context, *SessionInfoRequest) (*SessionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionInfo not implemented")
}
func (UnimplementedObbServer) PopularCombination(context.Context, *PopularCombinationRequest) (*PopularCombinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopularCombination not implemented")
}
func (UnimplementedObbServer) mustEmbedUnimplementedObbServer() {}
func (UnimplementedObbServer) testEmbeddedByValue()             {}

// UnsafeObbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObbServer will
// result in compilation errors.
type UnsafeObbServer interface {
	mustEmbedUnimplementedObbServer()
}

func RegisterObbServer(s grpc.ServiceRegistrar, srv ObbServer) {
	// If the following call pancis, it indicates UnimplementedObbServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Obb_ServiceDesc, srv)
}

func _Obb_AvailableMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObbServer).AvailableMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Obb_AvailableMarkets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObbServer).AvailableMarkets(ctx, req.(*AvailableMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Obb_SessionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObbServer).SessionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Obb_SessionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObbServer).SessionCreate(ctx, req.(*SessionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Obb_SessionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObbServer).SessionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Obb_SessionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObbServer).SessionInfo(ctx, req.(*SessionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Obb_PopularCombination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopularCombinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObbServer).PopularCombination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Obb_PopularCombination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObbServer).PopularCombination(ctx, req.(*PopularCombinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Obb_ServiceDesc is the grpc.ServiceDesc for Obb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Obb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "obb.obb",
	HandlerType: (*ObbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AvailableMarkets",
			Handler:    _Obb_AvailableMarkets_Handler,
		},
		{
			MethodName: "SessionCreate",
			Handler:    _Obb_SessionCreate_Handler,
		},
		{
			MethodName: "SessionInfo",
			Handler:    _Obb_SessionInfo_Handler,
		},
		{
			MethodName: "PopularCombination",
			Handler:    _Obb_PopularCombination_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "obb/service.proto",
}
